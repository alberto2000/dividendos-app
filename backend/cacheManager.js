const fs = require('fs').promises;
const path = require('path');

class CacheManager {
  constructor() {
    this.cacheDir = path.join(__dirname, 'data');
    this.cacheFile = path.join(this.cacheDir, 'dividendos-cache.json');
    this.backupFile = path.join(this.cacheDir, 'dividendos-backup.json');
  }

  // Cargar datos del cach√© desde archivo
  async loadCache() {
    try {
      console.log('üìÇ Cargando cach√© desde archivo...');
      const data = await fs.readFile(this.cacheFile, 'utf8');
      const cache = JSON.parse(data);
      
      // Validar estructura del cach√© (aceptar tanto array como objeto con confirmados/previstos)
      if (cache && cache.version) {
        if (Array.isArray(cache.dividendos)) {
          // Estructura antigua: array de dividendos
          console.log(`‚úÖ Cach√© cargado (formato antiguo): ${cache.dividendos.length} dividendos, √∫ltima actualizaci√≥n: ${cache.lastUpdate || 'Nunca'}`);
          return cache;
        } else if (cache.dividendos && cache.dividendos.confirmados && cache.dividendos.previstos) {
          // Estructura nueva: objeto con confirmados y previstos
          const totalDividendos = cache.dividendos.confirmados.length + cache.dividendos.previstos.length;
          console.log(`‚úÖ Cach√© cargado (formato nuevo): ${cache.dividendos.confirmados.length} confirmados, ${cache.dividendos.previstos.length} previstos, √∫ltima actualizaci√≥n: ${cache.lastUpdate || 'Nunca'}`);
          return cache;
        } else {
          console.log('‚ö†Ô∏è Estructura de cach√© inv√°lida, creando nuevo cach√©');
          return this.createEmptyCache();
        }
      } else {
        console.log('‚ö†Ô∏è Cach√© sin versi√≥n, creando nuevo cach√©');
        return this.createEmptyCache();
      }
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log('üìÇ Archivo de cach√© no existe, creando nuevo...');
        return this.createEmptyCache();
      } else {
        console.error('‚ùå Error cargando cach√©:', error.message);
        return this.createEmptyCache();
      }
    }
  }

  // Guardar datos en el cach√©
  async saveCache(dividendos, lastUpdate) {
    try {
      const cache = {
        dividendos,
        lastUpdate,
        version: '1.0',
        createdAt: new Date().toISOString()
      };

      // Crear backup antes de sobrescribir
      await this.createBackup();
      
      // Guardar nuevo cach√©
      await fs.writeFile(this.cacheFile, JSON.stringify(cache, null, 2), 'utf8');
      
      console.log(`üíæ Cach√© guardado: ${dividendos.length} dividendos, timestamp: ${lastUpdate}`);
      return true;
    } catch (error) {
      console.error('‚ùå Error guardando cach√©:', error.message);
      return false;
    }
  }

  // Crear backup del cach√© actual
  async createBackup() {
    try {
      const currentCache = await this.loadCache();
      if (currentCache.dividendos && currentCache.dividendos.length > 0) {
        await fs.writeFile(this.backupFile, JSON.stringify(currentCache, null, 2), 'utf8');
        console.log('üíæ Backup del cach√© creado');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo crear backup:', error.message);
    }
  }

  // Crear cach√© vac√≠o
  createEmptyCache() {
    return {
      dividendos: {
        confirmados: [],
        previstos: []
      },
      lastUpdate: null,
      version: '1.0',
      createdAt: new Date().toISOString()
    };
  }

  // Obtener informaci√≥n del cach√©
  async getCacheInfo() {
    try {
      const stats = await fs.stat(this.cacheFile);
      const cache = await this.loadCache();
      
      let dividendosCount = 0;
      if (Array.isArray(cache.dividendos)) {
        // Estructura antigua
        dividendosCount = cache.dividendos.length;
      } else if (cache.dividendos && cache.dividendos.confirmados && cache.dividendos.previstos) {
        // Estructura nueva
        dividendosCount = cache.dividendos.confirmados.length + cache.dividendos.previstos.length;
      }
      
      return {
        fileSize: stats.size,
        lastModified: stats.mtime,
        dividendosCount,
        lastUpdate: cache.lastUpdate,
        version: cache.version
      };
    } catch (error) {
      return {
        error: error.message
      };
    }
  }

  // Limpiar cach√© (eliminar archivo)
  async clearCache() {
    try {
      await fs.unlink(this.cacheFile);
      console.log('üóëÔ∏è Cach√© eliminado');
      return true;
    } catch (error) {
      console.error('‚ùå Error eliminando cach√©:', error.message);
      return false;
    }
  }
}

module.exports = CacheManager;
